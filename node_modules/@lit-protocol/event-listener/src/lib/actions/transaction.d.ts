import { ethers } from 'ethers';
import { Action } from './action';
import { StateMachine } from '../state-machine';
import { Address, ContextOrLiteral } from '../types';
interface TransactionActionBaseParams {
    debug?: boolean;
    stateMachine: StateMachine;
    evmChainId: ContextOrLiteral<number>;
    contractAddress: ContextOrLiteral<Address>;
    value?: ContextOrLiteral<string>;
}
interface TransactionActionWithoutDataParams extends TransactionActionBaseParams {
    contractABI: ethers.ContractInterface;
    method: ContextOrLiteral<string>;
    params?: ContextOrLiteral<unknown> | ContextOrLiteral<unknown>[];
}
interface TransactionActionWithDataParams extends TransactionActionBaseParams {
    data?: ContextOrLiteral<string>;
}
type TransactionActionParams = TransactionActionWithoutDataParams | TransactionActionWithDataParams;
export declare class TransactionAction extends Action {
    constructor(params: TransactionActionParams);
}
export {};
