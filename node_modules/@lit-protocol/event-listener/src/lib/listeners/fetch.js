"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetchListener = void 0;
const listener_1 = require("./listener");
class FetchListener extends listener_1.Listener {
    constructor(url, config = {}) {
        super({
            start: async () => {
                const { pollInterval = 1000, pathResponse = '' } = this.config.listenerConfig ?? {};
                this.intervalId = setInterval(async () => {
                    try {
                        const response = await fetch(this.url, this.config.fetchConfig);
                        const data = await response.json();
                        const value = pathResponse
                            ? pathResponse
                                .split('.')
                                .reduce((acc, part) => acc && acc[part], data)
                            : data;
                        if (value !== undefined) {
                            this.emit(value);
                        }
                    }
                    catch (error) {
                        console.error('FetchListener error:', error);
                    }
                }, pollInterval);
            },
            stop: async () => {
                if (this.intervalId) {
                    clearInterval(this.intervalId);
                    this.intervalId = null;
                }
            },
        });
        this.intervalId = null;
        this.url = url;
        this.config = config;
    }
}
exports.FetchListener = FetchListener;
//# sourceMappingURL=fetch.js.map