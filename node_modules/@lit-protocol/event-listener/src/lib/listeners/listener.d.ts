import { onError, voidAsyncFunction } from '../types';
export interface ListenerParams {
    start?: voidAsyncFunction;
    stop?: voidAsyncFunction;
    onError?: onError;
}
/**
 * A Listener class that manages event listeners for state changes.
 * @template T The type of the value being listened to. Defaults to unknown.
 */
export declare class Listener<T = unknown> {
    private emitter;
    private currentCallback;
    /**
     * The start function called when all listeners are started.
     */
    start: voidAsyncFunction;
    /**
     * The stop function called when all listeners are stopped.
     */
    stop: voidAsyncFunction;
    /**
     * The error handling function to call when an error occurs.
     */
    onError?: onError;
    /**
     * Constructor for the Listener class.
     * @param params The parameters object containing start and stop functions.
     */
    constructor({ start, stop, onError, }?: ListenerParams);
    /**
     * Removes all listeners from the emitter.
     */
    removeAllListeners(): void;
    /**
     * Registers a callback to be called when the state changes.
     * If a callback was previously registered, it will be replaced with the new one.
     * @param callback The function to call with the new state value.
     */
    onStateChange(callback: (value: T) => Promise<void>): void;
    /**
     * Emits a state change event with the given value.
     * @param value The state value to emit.
     */
    protected emit(value: T): void;
}
