"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Listener = void 0;
const events_1 = require("events");
/**
 * A Listener class that manages event listeners for state changes.
 * @template T The type of the value being listened to. Defaults to unknown.
 */
class Listener {
    /**
     * Constructor for the Listener class.
     * @param params The parameters object containing start and stop functions.
     */
    constructor({ start = async () => { }, stop = async () => { }, onError, } = {}) {
        this.emitter = new events_1.EventEmitter();
        this.currentCallback = null;
        this.start = start;
        this.stop = stop;
        this.onError = onError;
    }
    /**
     * Removes all listeners from the emitter.
     */
    removeAllListeners() {
        this.emitter.removeAllListeners();
    }
    /**
     * Registers a callback to be called when the state changes.
     * If a callback was previously registered, it will be replaced with the new one.
     * @param callback The function to call with the new state value.
     */
    onStateChange(callback) {
        if (this.currentCallback) {
            this.emitter.removeListener('stateChange', this.currentCallback);
        }
        this.currentCallback = callback;
        this.emitter.on('stateChange', callback);
    }
    /**
     * Emits a state change event with the given value.
     * @param value The state value to emit.
     */
    emit(value) {
        this.emitter.emit('stateChange', value);
    }
}
exports.Listener = Listener;
//# sourceMappingURL=listener.js.map