"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.signWithLitActionCode = void 0;
exports.executeLitAction = executeLitAction;
const auth_helpers_1 = require("@lit-protocol/auth-helpers");
const constants_1 = require("@lit-protocol/constants");
const lit_auth_client_1 = require("@lit-protocol/lit-auth-client");
exports.signWithLitActionCode = `(async () =>  {
            const signature = await Lit.Actions.signAndCombineEcdsa({
              toSign,
              publicKey,
              sigName,
            });

            Lit.Actions.setResponse({ response: signature });
          })();`;
const ONE_MINUTE = 1 * 60 * 1000;
async function executeLitAction({ litNodeClient, capacityTokenId, pkpEthAddress, pkpPublicKey, authSigner, ipfsId, code, jsParams, }) {
    let capacityDelegationAuthSig;
    if (litNodeClient.config.litNetwork !== constants_1.LIT_NETWORK.DatilDev) {
        const capacityDelegationAuthSigRes = await litNodeClient.createCapacityDelegationAuthSig({
            dAppOwnerWallet: authSigner,
            capacityTokenId,
            delegateeAddresses: [pkpEthAddress],
            uses: '1',
        });
        capacityDelegationAuthSig =
            capacityDelegationAuthSigRes.capacityDelegationAuthSig;
    }
    const expiration = new Date(Date.now() + ONE_MINUTE).toISOString();
    const pkpSessionSigs = await litNodeClient.getPkpSessionSigs({
        pkpPublicKey,
        capabilityAuthSigs: capacityDelegationAuthSig
            ? [capacityDelegationAuthSig]
            : [],
        authMethods: [
            await lit_auth_client_1.EthWalletProvider.authenticate({
                signer: authSigner,
                litNodeClient: litNodeClient,
                expiration,
            }),
        ],
        resourceAbilityRequests: [
            {
                resource: new auth_helpers_1.LitActionResource('*'),
                ability: constants_1.LIT_ABILITY.LitActionExecution,
            },
        ],
        expiration,
    });
    const executeJsResponse = await litNodeClient.executeJs({
        ipfsId,
        code,
        jsParams,
        sessionSigs: pkpSessionSigs,
    });
    return executeJsResponse;
}
//# sourceMappingURL=litActions.js.map