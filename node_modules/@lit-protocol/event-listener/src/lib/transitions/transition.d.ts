import { Listener } from '../listeners';
import { onError } from '../types';
export type CheckFn = (values: (unknown | undefined)[]) => Promise<boolean>;
export type resultFn = (values: (unknown | undefined)[]) => Promise<void>;
export interface BaseTransitionParams {
    debug?: boolean;
    listeners?: Listener<any>[];
    check?: CheckFn;
    onMatch: resultFn;
    onMismatch?: resultFn;
    onError?: onError;
}
/**
 * A Transition class that manages state transitions based on listeners and conditions.
 */
export declare class Transition {
    private readonly debug;
    private readonly listeners;
    private readonly values;
    private readonly check?;
    private readonly onMatch;
    private readonly onMismatch?;
    private readonly onError?;
    private readonly queue;
    private isProcessingQueue;
    /**
     * Creates a new Transition instance. If no listeners are provided, the transition will automatically match on the next event loop.
     *
     * @param params An object containing listeners, check function, and optional onMatch and onMismatch functions.
     */
    constructor({ debug, listeners, check, onMatch, onMismatch, onError, }: BaseTransitionParams);
    /**
     * Sets up listeners for state changes and handles transition logic.
     */
    private setupListeners;
    /**
     * Starts all listeners for this transition.
     */
    startListening(): Promise<void>;
    /**
     * Stops all listeners for this transition.
     */
    stopListening(): Promise<void>;
    private processQueue;
}
